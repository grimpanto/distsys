#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass scrbook
\use_default_options false
\language ngerman
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 0 2 5 -1
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Internet
\end_layout

\begin_layout Standard
Dieses Kapitel behandelt einige wichtige Standards und Protokolle, die im
 Internet eine wichtige Rolle spielen.
\end_layout

\begin_layout Minisec
URI
\end_layout

\begin_layout Standard
Unter einer URI (Uniform Resource Identifier, RFC 3986) versteht man den
 Überbegriff zu einer URL (Uniform Resource Locator) und URN (Uniform Resource
 Name).
 Eine URL stellt die Adresse einer Internetressource dar.
 Die URL hat lediglich, dass Problem, dass eine `hängende Referenz' entsteht,
 wenn die Ressource verschoben wird, d.h.
\begin_inset space ~
\end_inset

zu einem anderen Host verlagert wird.
 Eine URN ist andererseits der dauerhafte Name einer Internetressource.
\end_layout

\begin_layout Description
URL steht für Uniform Ressource Locator und wird im Web verwendet, um Einheiten
 zu addressieren.
\end_layout

\begin_deeper
\begin_layout Standard
Der typische Aufbau einer URL ist folgendermaßen:
\end_layout

\begin_layout LyX-Code
protocol://hostname:port/pathname[?query][#anchor]
\end_layout

\begin_layout Standard
Beispiele:
\end_layout

\begin_layout LyX-Code
http://www.htlwrn.ac.at:80/index.html
\end_layout

\begin_layout LyX-Code
http://www2.htlwrn.ac.at/ko/person.html#top
\end_layout

\begin_layout LyX-Code
http://www.google.at/index?q=php
\end_layout

\begin_layout Standard
Jeder Teil eines Domänennamens ist eine Zeichenkette (alphanumerisch, als
 einziges Sonderzeichen ist `-' erlaubt) die mindestens ein Zeichen und
 maximal 63 Zeichen lang sind.
 Ein Domänenname darf inklusive aller Punkte maximal 255 Zeichen lang sein.
\end_layout

\begin_layout Standard
Derzeit dürfen in URLs nur ASCII kodierte Zeichen vorkommen! Werden andere
 Zeichen oder Zeichen, die im Pfad einer URL eine Bedeutung haben (wie z.B.
 der Schrägstrich), benötigt, dann sind diese zu maskieren: 
\family typewriter
suche.cgi?name=G%FCnter+Kolousek
\end_layout

\begin_layout Enumerate
Die alphanummerischen Zeichen 
\begin_inset Quotes pld
\end_inset

a
\begin_inset Quotes prd
\end_inset

 - 
\begin_inset Quotes pld
\end_inset

z
\begin_inset Quotes prd
\end_inset

, 
\begin_inset Quotes pld
\end_inset

A
\begin_inset Quotes prd
\end_inset

 - 
\begin_inset Quotes pld
\end_inset

Z
\begin_inset Quotes prd
\end_inset

 und 
\begin_inset Quotes pld
\end_inset

0
\begin_inset Quotes prd
\end_inset

 - 
\begin_inset Quotes pld
\end_inset

9
\begin_inset Quotes prd
\end_inset

 bleiben gleich.
 
\end_layout

\begin_layout Enumerate
Die Zeichen 
\begin_inset Quotes pld
\end_inset

.
\begin_inset Quotes prd
\end_inset

, 
\begin_inset Quotes pld
\end_inset

-
\begin_inset Quotes prd
\end_inset

, 
\begin_inset Quotes pld
\end_inset

*
\begin_inset Quotes prd
\end_inset

 und 
\begin_inset Quotes pld
\end_inset

_
\begin_inset Quotes prd
\end_inset

 bleiben gleich .
 
\end_layout

\begin_layout Enumerate
Das Space Zeichen 
\begin_inset Quotes pld
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Quotes prd
\end_inset

 wird in ein 
\begin_inset Quotes pld
\end_inset

+
\begin_inset Quotes prd
\end_inset

 gewandelt.
 
\end_layout

\begin_layout Enumerate
Alle anderen Zeichen werden in ein oder mehrere Bytes gewandelt (W3C empfiehlt
 UTF-8).
 Danach wird jedes Byte in einen 3-Zeichen String gewandelt, 
\begin_inset Quotes pld
\end_inset

%xy
\begin_inset Quotes prd
\end_inset

, wobei xy eine hexadezimale Zahl mit 2 Ziffern ist.
\end_layout

\begin_layout Standard
Dies entspricht dem MIME Typ 
\begin_inset Quotes pld
\end_inset

application/x-www-form-urlencoded
\begin_inset Quotes prd
\end_inset

.
 Dieser Sachverhalt ist in der Benennung von Datei\SpecialChar \-
namen zu beachten!
\end_layout

\begin_layout Standard
Seit März 2004 können deutsche, österreichische, schweizer und lichtensteiner
 Domänen mit Umlauten registriert und verwendet werden.
 Um das neue System mit dem bisherigen kompatibel zu halten, werden die
 erweiterten Zeichensätze mit erlaubten Zeichen kodiert, also auf derzeit
 gültige Namen abgebildet (Punycode).
 
\end_layout

\end_deeper
\begin_layout Description
URN Uniform Resource Name ist ein eindeutiger Name, der unabhängig von der
 Adresse eine Ressource eindeutig identifiziert.
 Mit der URN kann man bei einem 
\begin_inset Quotes pld
\end_inset

URN-Verzeichnsdienst
\begin_inset Quotes prd
\end_inset

 die zugehörige URL erhalten.
 Allerdings hat sich kein Verzeichnis für URN etablieren können.
 Eine URN hat folgende Gestalt: 
\family typewriter
urn:Namensraum:Name
\family default
, z.B.
 urn:isbn:3-8266-1378-3.
\end_layout

\begin_layout Section
HTTP
\end_layout

\begin_layout Standard
HTTP (hyper text transfer protocol) ist ein Client/Server Protokoll, das
 ursprünglich zur Abfrage von statischen Informationen entworfen wurde.
\end_layout

\begin_layout Subsection
Beschreibung
\end_layout

\begin_layout Itemize
Ist ein relativ einfaches, lightweight, zustandsloses Protocol.
 D.h.
 der Server merkt sich keinen Zustand zwischen mehreren Anfragen eines Clients.
\end_layout

\begin_layout Itemize
Ist ein verbindungsloses Protokoll.
 D.h.
 jede Verbindung wird prinzipiell nach jeder Abfrage wieder abgebaut (bis
 http/1.0).
\end_layout

\begin_layout Itemize
Wurde ursprünglich für die Abfrage rein statischer Information entworfen.
\end_layout

\begin_layout Itemize
Ist ein zeichen-orientiertes Protokoll (im Gegensatz zu einem binären Protokoll)
\end_layout

\begin_layout Itemize
Ist ein reines Request/Response Protokoll 
\end_layout

\begin_deeper
\begin_layout Itemize
Immer Client (user agent) beginnt request
\end_layout

\begin_layout Itemize
kein callback des Servers zum Client
\end_layout

\begin_layout Itemize
Client muss immer Verbindung aufbauen, Server schließt Verbindung nach response
 (beide können vorzeitig die Verbindung abbrechen)
\end_layout

\end_deeper
\begin_layout Itemize
Verhandlung über Datenrepräsentation 
\end_layout

\begin_layout Itemize
funktioniert mit TCP.
 Der Standardport ist 80.
 
\end_layout

\begin_layout Itemize
Die erste Version von http war die Version 0.9, bei dem es sich um eine einfache
 Version handelte.
 Version 1.0 ist eine verbesserte Version, die hauptsächlich Nachrichten
 im MIME Format und Metainformation über die Daten beinhaltet.
 Derzeit gibt es hauptsächlich Implementierungen der Version 1.0 (RFC 1945)
 und der Version 1.1 (RFC 2616, 2817) von http.
\end_layout

\begin_deeper
\begin_layout Standard
Ein wesentlicher Unterschied zwischen 1.0 und 1.1 liegt daran, dass in http/1.0
 der Server nach dem Senden der Antwort die Verbindung zum Client geschlossen
 hat, wenn nicht der Header 'Connection: KeepAlive' vom Client gesendet
 worden ist.
 In http/1.1 wird die Verbindung aufrechterhalten, wenn nicht der Client
 explizit 'Connection: Close' gesendet hat.
 Aufgrund der vielen Inline-Images, Applets und Frames wird dadurch viel
 Overhead vermieden.
\end_layout

\begin_layout Standard
Andere Unterschiede betreffen die Unterstützung zum Cachen von Internet
 Ressourcen und das Unterstützen mehrere Domänen zu einer IP Adresse.
 Außerdem ist das sogenannte `chunked encoding' hinzugekommen, das es erlaubt
 bereits die Antwort zu senden ohne die Länge der Antwort zu kennen.
 
\end_layout

\end_deeper
\begin_layout Subsection
Http Request
\end_layout

\begin_layout Itemize
zeilenorientierter Aufbau
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Methode Request-URI Protokoll
\backslash
r
\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
erste Zeile
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Key: Value
\backslash
r
\backslash
n)*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
beliebige Anzahl an Header Zeilen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
r
\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
eine Leerzeile
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Daten)?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
optionaler Datenblock
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\backslash
r entspricht einem Carrige Return (ASCII 13) und 
\backslash
n entspricht einem Line Feed (ASCII 10).
\end_layout

\begin_layout Standard
Daten in einer URL werden (im speziellen bei einem GET Request, aber auch
 bei einem POST Request) 
\begin_inset Quotes pld
\end_inset

urlencoded
\begin_inset Quotes prd
\end_inset

.
 Meistens wird die Request-URI als eine relative URL angegeben.
 D.h.
 es sieht die URL z.B.
 so aus: /lva/prr.html.
 Es gibt jedoch folgendes dabei zu beachten: 
\end_layout

\begin_layout Itemize
Wird ein Proxy verwendet, dann sendet der Browser eine absolute URL an diesen,
 damit dieser weiß an welchen Server er die Anforderung weiter senden soll.
 Z.B.
 http://edvowww.htlwrn.ac.at/ko/prr5.html! 
\end_layout

\begin_layout Itemize
http 1.1 konforme Server müssen absolute URLs verstehen! 
\end_layout

\end_deeper
\begin_layout Itemize
Verfügbare Methoden (immer in Großbuchstaben) 
\end_layout

\begin_deeper
\begin_layout Description
GET Die GET Anforderung wird benötigt, um ein Dokument herunterzuladen (kein
 Datenbereich der Anforderung).
\end_layout

\begin_deeper
\begin_layout Standard
Bei der Request-URI kann es sich um einen Pfadnamen zu einem Dokument aber
 auch die Angabe eines CGI Programmes handeln.
\end_layout

\begin_layout Standard
Wird ein Formular ausgefüllt und mit der GET Methode ausgeführt, dann werden
 die ausgefüllten Felder an die Request-URI angehängt.
\end_layout

\begin_layout Standard
Bsp.: 
\family typewriter
GET /cgi/greeetings.pl?name=max&email=max@htlwrn.ac.at HTTP/1.0
\family default
 Beinhaltet der GET-Request einen If-Modified-Since Header, dann werden
 die Daten nur im Bedarfsfall übertragen.
 Auch damit kann die Netzwerksbelastung gesenkt werden.
\end_layout

\begin_layout Standard
Die Semantik einer GET Anforderung ist, dass prinzipiell am Server keine
 Veränderungen hervorgerufen werden sollen.
 D.h.
 mehrmaliges Senden einer GET Anforderung soll prinzipiell immer zum selben
 Ergebnis führen.
\end_layout

\end_deeper
\begin_layout Description
HEAD Wie die GET Anforderung, jedoch Response ohne Daten.
 D.h., es werden nur die Headerinformationen zurück übertragen.
\end_layout

\begin_layout Description
POST Die POST Methode dient der Übertragung eines Datenblockes an den Server
 (im Datenbereich).
\end_layout

\begin_deeper
\begin_layout Standard
Die POST Methode wird verwendet, um beliebige Daten an den Server zu übertragen.
 Im Speziellen wird sie verwendet, um HTML FORM Daten zu übertragen.
 Dies hat den Vorteil, dass beliebige lange Daten übertragen werden können
 und keine Beschränkung bzgl.
 der Länge der Request-URI vorliegt.
\end_layout

\begin_layout Standard
Die Semantik der POST Anforderung ist, dass es am Server prinzipiell zu
 Veränderungen kommen kann.
\end_layout

\end_deeper
\begin_layout Description
PUT Gegenstück zu GET.
 Inhalt des Datenblockes soll unter der Request-URI abgespeichert werden.
\end_layout

\begin_layout Description
DELETE Löschen eines Dokumentes, das unter der Request-URI zu finden ist.
\end_layout

\begin_layout Description
TRACE Wird verwendet, um Requests durch Firewalls und über Proxy Server
 zu testen.
\end_layout

\begin_layout Description
OPTIONS Wird verwendet, um die Fähigkeiten des Servers abzufragen.
\end_layout

\end_deeper
\begin_layout Itemize
Die wichtigsten HTTP Header innerhalb einer Anfrage 
\end_layout

\begin_deeper
\begin_layout Description
Host:
\begin_inset space ~
\end_inset

host muss immer vorhanden sein (http/1.1) und enthält entweder die IP Adresse
 oder den Domännamen des Webservers.
 Damit kann zwischen verschiedenen virtuellen Hosts unterschieden werden.
\end_layout

\begin_layout Description
Connection:
\begin_inset space ~
\end_inset

options Keep-Alive oder Close.
 Mit Close wird der Server angewiesen die Verbindung zu schließen sobald
 die Übertragung abgeschlossen ist.
\end_layout

\begin_layout Description
User-Agent:
\begin_inset space ~
\end_inset

name übergibt Informationen über den verwendeten Browser
\end_layout

\begin_layout Description
Accept:
\begin_inset space ~
\end_inset

type/subtype MIME Type; siehe Beispiele 
\end_layout

\begin_layout Description
Accept-Charset gibt Zeichensätze an, die der Browser darstellen kann; siehe
 Beispiele 
\end_layout

\begin_layout Description
Accept-Encoding gibt Encoding an, das der Browser versteht; siehe Beispiele
 
\end_layout

\begin_layout Description
Accept-Language gibt die bevorzugten Sprachen an.
 Damit kann der Webserver den Inhalt in der Sprache des Benutzers anzeigen
 (wenn vorhanden) 
\end_layout

\begin_layout Description
Authorization:
\begin_inset space ~
\end_inset

credidentials Wenn der Client eine 401 Antwort bekommenen hat, dann wird
 im nächsten Request dieser Header mitgeschickt.
 
\end_layout

\begin_layout Description
If-Modified-Since:
\begin_inset space ~
\end_inset

datein-rfc1123-format Inhalt soll geschickt werden, wenn Dokument seit diesem
 Datum modifiziert worden ist.
 Wenn nicht modifiziert, dann wird eine 304 (not modified) Antwort zurückgesende
t.
 
\end_layout

\begin_layout Description
Cookie:
\begin_inset space ~
\end_inset

NAME=VALUE wird im Request zum Server mitübertragen
\end_layout

\begin_layout Description
Content-Length:
\begin_inset space ~
\end_inset

n siehe Beispiele
\end_layout

\begin_layout Description
Content-Type:
\begin_inset space ~
\end_inset

type/subtype MIME Type; siehe Beispiele
\end_layout

\end_deeper
\begin_layout Subsection
Http Response
\end_layout

\begin_layout Itemize
zeilenorientierter Aufbau
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Protokoll Statuscode Beschreibung
\backslash
r
\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
erste Zeile
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Key: Value
\backslash
r
\backslash
n)*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
beliebige Anzahl an Header Zeilen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\backslash
r
\backslash
n
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
eine Leerzeile
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(Daten)?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
optionaler Datenblock
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Die wichtigsten HTTP Header innerhalb von Response
\end_layout

\begin_deeper
\begin_layout Description
Date:
\begin_inset space ~
\end_inset

date-in-rfc1123-format Gibt das Datum der Antwort an; siehe vorhergehende
 Beispiele.
 Muss immer vorhanden sein (http/1.1).
 
\end_layout

\begin_layout Description
Server Gibt den Namen des Servers bzw.
 des Serverprogrammes und der Version an.
\end_layout

\begin_layout Description
Accept-Ranges zeigt an, dass auch Anfragen zu einzelnen Bereichen der Ressource
 möglich sind und gibt die Einheit an, die dabei verwendet werden kann.
\end_layout

\begin_layout Description
Pragma:
\begin_inset space ~
\end_inset

no-cache Der Response soll zum Client gelangen, auch wenn es eine Version
 in einem Cache gibt.
 Nutzen zweifelhaft, da in der http Spezifikation Werte für pragma Header
 nicht definiert sind und die meisten Caches diesen Wert ignorieren.
\end_layout

\begin_layout Description
Expires:
\begin_inset space ~
\end_inset

rfc-1123-date nach dieser Zeit ist die Antwort als ungültig zu betrachten.
 Z.B.
\family typewriter
: Expires: Fri, 30 Oct 2004 14:19:41 GMT
\end_layout

\begin_layout Description
Last-Modified:
\begin_inset space ~
\end_inset

date-in-rfc-1123-date wie 
\begin_inset Quotes pld
\end_inset

Date
\begin_inset Quotes prd
\end_inset

, Modifikationsdatum.
 Der Client kann kann diese Information in einem lokalen Cache als Zeitstempel
 verwenden, sodass Ressourcen nur dann angefordert werden, wenn sie sich
 seit der letzten Anfrage geändert haben.
\end_layout

\begin_layout Description
Cache-control:
\begin_inset space ~
\end_inset

value Ist ein Header, der in http 1.1 definiert wurde.
 Zusammen mit Expires, Last-Modified und einem ETag header wird hauptsächlich
 das Caching kontrolliert.
\end_layout

\begin_layout Description
WWW-Authenticate:
\begin_inset space ~
\end_inset

scheme
\begin_inset space ~
\end_inset

realm Wenn der Server eine 401 (Unauthorized) Antwort zurückschickt, dann
 muss dieser auch diesen Header mitschicken.
 z.B.: 
\family typewriter
WWW-Authenticate: Basic realm="secure"
\family default
.
 
\end_layout

\begin_layout Description
Location:
\begin_inset space ~
\end_inset

URI redirect Message (siehe Redirect Statuscodes weiter unten)!
\end_layout

\begin_layout Description
Set-cookie:
\begin_inset space ~
\end_inset

NAME=VALUE z.B.
 kann der Value folgendermaßen aussehen: 
\family typewriter
Max-age=3600;Domain=".htlwrn.ac.at";Path="/"
\end_layout

\begin_layout Description
Content-Length:
\begin_inset space ~
\end_inset

n siehe Beispiele
\end_layout

\begin_layout Description
Content-Type:
\begin_inset space ~
\end_inset

type/subtype siehe Beispiele
\end_layout

\end_deeper
\begin_layout Itemize
Die wichtigsten Statuscodes sind: 
\end_layout

\begin_deeper
\begin_layout Description
1xx Information 
\end_layout

\begin_layout Description
2xx Erfolgreich (im Speziellen '200 OK') 
\end_layout

\begin_layout Description
3xx Redirection (im Speziellen '301 Moved Permanently') 
\end_layout

\begin_layout Description
4xx Client Fehler.
 Verschiedene wichtige Codes sind: 400 (Bad Request), 401 (Unauthorized),
 403 (Forbidden), 404 (Not Found)
\end_layout

\begin_layout Description
5xx Server Fehler: 500 (Internal Server Error), 501 (Not Implemented), 503
 (Service Unavailable), 505 (HTTP Version Not Supported)
\end_layout

\end_deeper
\begin_layout Subsection
Beispiele
\end_layout

\begin_layout Minisec
HTTP Request
\end_layout

\begin_layout LyX-Code
Alle Dateitypen, Server trennt nicht!
\end_layout

\begin_layout LyX-Code
GET /index.html HTTP/1.0
\end_layout

\begin_layout LyX-Code
Accept: text/html, image/gif, image/jpeg
\end_layout

\begin_layout LyX-Code
Accept-Encoding: compress, gzip
\end_layout

\begin_layout LyX-Code
Connection: Keep-Alive
\end_layout

\begin_layout LyX-Code
Host: www.w3.org User-Agent: Mozilla/5.0
\end_layout

\begin_layout LyX-Code
<<eof>>
\end_layout

\begin_layout Minisec
HTTP Response
\end_layout

\begin_layout LyX-Code
HTTP/1.0 200 OK
\end_layout

\begin_layout LyX-Code
Date: Wed, 19 May 1999 18:20:56 GMT
\end_layout

\begin_layout LyX-Code
Server: Apache/1.3.6 (Uni) PHP/3.0.7
\end_layout

\begin_layout LyX-Code
Last-Modified: Mon, 17 May 1999 15:46:21 GMT
\end_layout

\begin_layout LyX-Code
Content-Length: 10352
\end_layout

\begin_layout LyX-Code
Connection: close
\end_layout

\begin_layout LyX-Code
Content-Type: text/html; charset=utf-8
\end_layout

\begin_layout LyX-Code
<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 4.1 Strict//EN"> "http://www.w3.org/TR/xht
ml1/DTD/xhtml1-strict.dtd">
\end_layout

\begin_layout LyX-Code
<html> ...
 </html>
\end_layout

\begin_layout LyX-Code
<<eof>>
\end_layout

\begin_layout Subsection
Session Tracking
\end_layout

\begin_layout Standard
Es gibt die folgenden Möglichkeiten, um im WWW Sessions zu etablieren:
\end_layout

\begin_layout Itemize
URL rewriting wie z.B.
\family typewriter

\begin_inset Newline newline
\end_inset

<a href="http://edvowww.htlwrn.ac.at/index.html?uid=ko">EDVO WWW</a>
\end_layout

\begin_layout Itemize
Cookies: Mit Cookies können natürlich leicht Sessions verwaltet werden,
 aber: Manche Benutzer verweigern Cookies! Deshalb ist es mit Java Servlets
 und JSP möglich Session transparent zu verwalten.
 Es wird zuerst versucht ein Cookie mit dem Namen jsessionid zu setzen und
 wenn dies fehlschlägt wird auf URL rewriting umgeschaltet (ebenfalls jsessionid
).
\end_layout

\begin_deeper
\begin_layout Standard
Damit das funktioniert sollten alle URLs folgendermaßen gebildet werden:
 
\family typewriter
String shopUrl = response.encodeURL("/shop");
\end_layout

\end_deeper
\begin_layout Itemize
Hidden form fields
\end_layout

\begin_layout Itemize
Sessions mit SSL
\end_layout

\begin_layout Subsection
Authentifizierung
\end_layout

\begin_layout Standard
Um sich bei einer Website anzumelden gibt es prinzipiell verschiedene Möglichkei
ten:
\end_layout

\begin_layout Itemize
HTTP Basic Authentication: Es wird eine Dialogbox geöffnet in der der Benutzerna
me und das Passwort eingegeben werden kann.
 Diese werden im Prinzip im Klartext (nur Base64 kodiert) zum Server übertragen.
 Das ist auch die größte Schwäche dieses Verfahrens!
\end_layout

\begin_deeper
\begin_layout Standard
Im Prinzip funktioniert das folgendermaßen: 
\end_layout

\begin_layout Enumerate
Der Client sendet einen HTTP Request an den Server: 
\family typewriter
GET /secure/index.html http/1.0
\family default
.
 D.h.
 es soll auf eine Ressource in einem geschützten Verzeichnis zugegriffen
 werden.
 Dazu muss sich der Benutzer dem Server gegenüber identifizieren.
\end_layout

\begin_layout Enumerate
Der Server antwortet mit folgendem Response:
\end_layout

\begin_deeper
\begin_layout LyX-Code
HTTP/1.0 401 Unauthorized
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
WWW-Authenticate: Basic realm="secureapp"
\end_layout

\begin_layout Standard
D.h.
 der Server teilt mit, dass der Zugriff prinzipiell verweigert wird, das
 gewünschte Objekt (/secure/index.html) sich im Bereich 'secureapp' befindet
 und sich der Benutzer in diesen Bereich einloggen muss.
\end_layout

\end_deeper
\begin_layout Enumerate
Der Browser erzeugt daraufhin eine Dialogbox in die der Benutzer seinen
 Benutzernamen und sein Passwort eingeben kann.
 Dann wird wieder ein Request an den Server gesendet:
\end_layout

\begin_deeper
\begin_layout LyX-Code
GET /secure/index.html http/1.0
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
Authorization: Basic bWF4Om11c3Rlcg==
\end_layout

\begin_layout Standard
Damit teilt der Client dem Server mit, dass die Basic Authentication verwendet
 wird und der Benutzername und das Passwort sind in der folgenden Zeichenkette
 mittels Base64 kodiert und kann demzufolge von jedem Angreifer wieder rückkodie
rt werden! Base64: 3 Byte werden in 4 Teile zu je 6 bit zerteilt.
 Jeder dieser Teile wird ASCII mäßig folgendermaßen kodiert: 0 zu A, 1 zu
 B,...,26 zu a,..., 52 zu 0,...,61 zu 9 und 62 zu + und 63 zu /.
 Als padding Zeichen wird = verwendet.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
NTLM Authentication: Funktioniert nur mit M$ Browser-, Proxy- und Serverprodukte
n! Es handelt sich um eine Authentifizierung für M$ LANs, die etwas sicherer
 als HTTP Basic Authentication, aber nicht so sicher wie die HTTP Digest
 Authentication ist.
 
\end_layout

\begin_layout Itemize
HTTP Digest Authentication (http/1.1): Um die Schwäche von HTTP Basic zu
 entfernen wurde HTTP Digest eingeführt.
 Im Prinzip funktioniert es folgendermaßen: 
\end_layout

\begin_deeper
\begin_layout Enumerate
Der Server sendet ein 'auth challenge' an den Client.
 Es handelt sich hierbei um einen mehr oder weniger zufälligen Wert, der
 meistens jedoch auch von der Zeit abhängt.
\end_layout

\begin_layout Enumerate
Der Client generiert ein 'digest' (zu Deutsch ca.
 Auszug) mit folgendem Inhalt: Benutzername, HTTP realm und Passwort.
 Er erzeugt ein weiteres digest, das die Methode und die URL des ursprünglichen
 HTTP Request enthält.
 Diese beiden digest - Werte werden gemeinsam mit dem 'auth challenge' zu
 einem Wert mittels einer Hashfunktion (Einwegfunktion) verarbeitet, sodass
 nicht mehr auf das Passwort geschlossen werden kann und gemeinsam mit dem
 Benutzernamen zum Server übertragen.
 Achtung: auch bei dieser Methode sind prinzipiell Angriffe möglich, auch
 wenn das Passwort nicht mehr im Klartext übertragen wird.
 
\end_layout

\end_deeper
\begin_layout Itemize
Formularbasierte Anmeldung mit Cookies: Auf Grund der Unsicherheit von HTTP
 Basic Authentication und der nicht durchgehenden Verfügbarkeit der HTTP
 Digest Authentication werden die meisten Anmeldungen heutzutage durch eigene
 Formulare durchgeführt.
 Die Zustandsinformation wird mittels Cookies hergestellt.
 Allerdings wird das Paßwort auch hier in der Regel im Klartext übertragen!!
 Prinzipiell kann mit Hilfe von Javascript jedoch eine ähnliche Sicherheit
 wie bei HTTP Digest Authentication erreicht werden.
\end_layout

\begin_deeper
\begin_layout Standard
Cookies werden oft einer http Basic Authentifizierung vorgezogen, da es
 bei http Basic Authentifizierung 
\end_layout

\begin_layout Itemize
keine Möglichkeit gibt, sich wieder auszuloggen.
\end_layout

\begin_layout Itemize
keine Möglichkeit gibt, eigene Formulare zu verwenden.
 
\end_layout

\begin_layout Itemize
keine Möglichkeit gibt sich in mehreren Domänen (Realm) mit einem Login
 einzuloggen.
 
\end_layout

\begin_layout Itemize
diese nicht sicher ist.
\end_layout

\begin_layout Standard
Die letzten beiden Punkte können mit http Digest Authentifizierung behoben
 werden, die ersten beiden nicht.
\end_layout

\end_deeper
\begin_layout Itemize
HTTPS -Authentifizierung: Die einzige relativ sichere Variante besteht darin
 eine SSL Verbindung aufzubauen und entweder eine HTTPS Client Authentifizierung
 und/oder eine HTTP Server Authentifizierung durchzuführen.
 Dies ist einerseits leicht durchzuführen, jedoch andererseits mittels erhöhter
 Ressourcenanforderung verbunden.
 Deshalb wird oft nur die Anmeldung mittels einer HTTPS Serverauthentifizierung
 durchgeführt und danach wieder auf ungesicherte Verbindungen zurückgegriffen.
 
\end_layout

\begin_layout Subsection
Server Redirection
\end_layout

\begin_layout Standard
Will ein Server eine Redirection auf http Ebene durchführen, dann funktioniert
 das folgendermaßen:
\end_layout

\begin_layout Enumerate
Der Client schickt einen Request an den Server, z.B.
 
\family typewriter
GET /form.php?...
 http/1.0
\end_layout

\begin_layout Enumerate
Daraufhin antwortet der Server mit folgendem Response: 
\end_layout

\begin_deeper
\begin_layout LyX-Code
HTTP/1.0 302 Found
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
Location: confirm.html
\end_layout

\begin_layout Standard
Damit teilt der Server dem Client mit, dass die 'gesuchte' Ressource unter
 der angegebenen Adresse zu finden ist.
\end_layout

\end_deeper
\begin_layout Enumerate
D.h.
 der Client stellt daraufhin einen neuen Request an den Server und fordert
 die angegebene Ressource an: 
\family typewriter
GET /confirm.html http/1.0
\end_layout

\begin_layout Standard
Die einzelnen Statuscodes geben Auskunft ob caching des Requests erlaubt
 ist, ob eine Rückfrage beim Benutzer bzgl.
 Weiterleitung durchgeführt werden muss, ob von einem POST Request nach
 einem POST Request weitergeleitet werden darf bzw.
 von POST Request nach GET und ob die Redirection selbst gecachet werden
 darf.
\end_layout

\begin_layout Subsection
CGI
\end_layout

\begin_layout Standard
CGI steht für Common Gateway Interface und ist eine Spezifikation wie Prozesse
 am Server gestartet werden können und diese mit dem Input versorgt werden
 bzw.
 wie sie den Output wieder zurückgeben.
 Meistens werden solche CGI Programme in Folge eines POST Requests ausgeführt
 (aber nicht zwingend).
\end_layout

\begin_layout Standard
Obwohl CGI Programme den prinzipiellen Nachteil haben, dass jedes Mal ein
 eigener Prozess gestartet wird und es durch serverseitige Skriptsprachen
 und Templatesprachen wie PHP, ASP und JSP weitgehend verdrängt worden ist,
 wird es doch noch hie und da eingesetzt.
\end_layout

\begin_layout Standard
Wenn der Server ein CGI Programm als Prozess startet, dann bekommt dieser
 Prozess seine Eingaben durch Umgebungsvariablen, Kommandozeile und Standard
 Input.
 Alle Ausgaben werden mittels Standard Output getätigt.
\end_layout

\begin_layout Minisec
Umgebungsvariablen
\end_layout

\begin_layout Standard
Folgende Umgebungsvariablen stehen z.B.
 zur Verfügung:
\end_layout

\begin_layout Description
REQUEST_METHOD z.B.
 
\begin_inset Quotes pld
\end_inset

GET
\begin_inset Quotes prd
\end_inset

, 
\begin_inset Quotes pld
\end_inset

POST
\begin_inset Quotes prd
\end_inset

,...
\end_layout

\begin_layout Description
QUERY_STRING d.h.
 der Teil, der nach dem ? in der URL kommt.
\end_layout

\begin_layout Description
PATH_INFO etwaige extra Information, die nach dem CGI Skriptnamen kommt,
 aber nicht der Query String ist.
 Z.B.
 
\family typewriter
http://www.htlwrn.ac.at/cgi-bin/search.cgi/extra/path?user=ko
\family default
 aber eben ohne den Query String 
\end_layout

\begin_layout Description
REMOTE_ADDR die IP Adresse des Client 
\end_layout

\begin_layout Description
REMOTE_HOST der Hostname, wenn bekannt
\end_layout

\begin_layout Description
CONTENT_TYPE
\end_layout

\begin_layout Description
CONTENT_LENGTH
\end_layout

\begin_layout Standard
Zusätzlich wird noch für jeden Header eine Umgebungsvariable erzeugt, die
 so lautet wie der Header jedoch mit dem Präfix HTTP_ und alle Bindestriche
 durch Unterstriche ersetzt.
 Z.B.
 wird aus dem Header USER_AGENT die Umgebungsvariable HTTP_USER_AGENT.
\end_layout

\begin_layout Minisec
Kommandozeile
\end_layout

\begin_layout Standard
Diese wird nur bei ISINDEX Abfragen verwendet, die jedoch de facto nicht
 verwendet wird.
\end_layout

\begin_layout Minisec
Standard Input
\end_layout

\begin_layout Standard
Der Standard Input enthält den Body des HTTP POST Requests bzw.
 eines PUT Request.
 D.h.
 es folgen CONTENT_LENGTH Bytes.
\end_layout

\begin_layout Minisec
Standard Output
\end_layout

\begin_layout Standard
Normalerweise parst der Server den Output des CGI Skripts auf Headerzeilen
 und ergänzt den Output so, dass eine gültige HTTP Antwort entsteht.
 D.h.
 in der Regel reicht es den CONTENT_TYPE Header zu setzen und danach den
 Body der HTTP Antwort folgen zu lassen.
\end_layout

\begin_layout Standard
Weitere Informationen unter http://www.w3.org/CGI/.
\end_layout

\begin_layout Standard
FastCGI, SCGI
\end_layout

\begin_layout Subsection
https
\end_layout

\begin_layout Standard
(RFC 2818)
\end_layout

\begin_layout Standard
Eine gesicherte Verbindung mit dem Protokoll https wird durch Verwendung
 von SSL (Secure Socket Layer) / TLS (Transport Layer Security) erreicht.
 D.h.
 es wird http über SSL über TCP betrieben; es findet eine Punkt-zu-Punkt
 sichere Verbindung statt.
 Das wiederum heißt, dass es bzgl.
 Programmierung keine Änderungen gibt, nachdem eine derartige Verbindung
 aufgebaut worden ist.
\end_layout

\begin_layout Standard
TLS 1.0 (RFC 2246) ist ein geringfügig modifiziertes SSL 3.0, das sich im
 Protokollheader als Version 3.1 meldet.
 TLS ist der neue Standard.
 Die Verwendung des Begriffes SSL ist jedoch noch immer weit verbreitet.
\end_layout

\begin_layout Standard
Der Standardport für https ist 443.
\end_layout

\begin_layout Standard
Andere Anwendungsfälle liegen in der gesicherten Verwendung von IMAP, SMTP
 oder LDAP.
\end_layout

\begin_layout Standard
Am einfachsten kann man in Java mittels der Klasse java.net.URL auf einen
 Server mittels https zugreifen.
\end_layout

\begin_layout Standard
Der Vorteil von TLS gegenüber ssh ist, dass die Authentifizierung des Hosts
 über eine PKI verläuft.
 D.h.
 der Host muss vorher nicht bekannt sein.
\end_layout

\begin_layout Standard
Das folgende Beispiel zeigt, wie man mit URL und HttpURLConnection einfach
 auf eine Ressource zugreifen kann, wie ein Proxy konfiguriert werden kann
 und wie Redirection in Java (mittels HttpURLConnection) funktioniert.
 Aus Sicherheitsgründen wird allerdings kein automatisches Redirect zu einer
 https: URL vorgenommen.
 Dies muss explizit programmiert werden.
 
\end_layout

\begin_layout Subsection
WebDAV
\end_layout

\begin_layout Standard
(RFC 2291 und RFC 2518)
\end_layout

\begin_layout Standard
WebDAV (WWW Distributed Authoring and Versioning) ist eine Erweiterung des
 http 1.1 Protokolls, das zum Bearbeiten von WWW Ressourcen geeignet ist.
 Das 
\begin_inset Quotes pld
\end_inset

Versioning
\begin_inset Quotes prd
\end_inset

 im Namen wird derzeit im Protokoll nicht umgesetzt.
 Relevanz bekommt dieses Protokoll alleine schon dadurch, dass es von den
 Microsoft Office-Produkten und dem Internet Explorer (als Web Folder bekannt)
 unterstützt wird.
 Natürlich wird es auch von anderen Programmen und Betriebssystemen unterstützt,
 z.B.: Adobe InDesign, Konqueror, Mac OS X.
\end_layout

\begin_layout Standard
Serverseitig wird dieses Protokoll z.B.
 von Apache, IIS, Subversion oder Zope unterstützt.
\end_layout

\begin_layout Standard
Dazu unterstützt das Protokoll das Anlegen, Verändern, Kopieren und Verschieben
 von Ressourcen (auch Verzeichnissen).
 Weiters können Ressourcen gelockt werden und mit Eigenschaften (properties)
 versehen werden.
 D.h.
 man kann z.B.
 auf einfache Weise Dateien oder ganze Verzeichnisse von der lokalen Festplatte
 auf einen Internet-Server hochladen.
\end_layout

\begin_layout Standard
Mit den 
\begin_inset Quotes pld
\end_inset

Versioning Extensions to WebDAV
\begin_inset Quotes prd
\end_inset

 wurden als RFC 3253 nun auch das Konzept der Versionierung spezifiziert.
\end_layout

\end_body
\end_document
